//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestClient.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Flight", Namespace="http://schemas.datacontract.org/2004/07/TrialAndErrorWcF")]
    [System.SerializableAttribute()]
    public partial class Flight : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ArrivalTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DepartTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FlightIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FlightTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FromLocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ToLocationField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ArrivalTime {
            get {
                return this.ArrivalTimeField;
            }
            set {
                if ((this.ArrivalTimeField.Equals(value) != true)) {
                    this.ArrivalTimeField = value;
                    this.RaisePropertyChanged("ArrivalTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DepartTime {
            get {
                return this.DepartTimeField;
            }
            set {
                if ((this.DepartTimeField.Equals(value) != true)) {
                    this.DepartTimeField = value;
                    this.RaisePropertyChanged("DepartTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FlightId {
            get {
                return this.FlightIdField;
            }
            set {
                if ((this.FlightIdField.Equals(value) != true)) {
                    this.FlightIdField = value;
                    this.RaisePropertyChanged("FlightId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FlightType {
            get {
                return this.FlightTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.FlightTypeField, value) != true)) {
                    this.FlightTypeField = value;
                    this.RaisePropertyChanged("FlightType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FromLocation {
            get {
                return this.FromLocationField;
            }
            set {
                if ((object.ReferenceEquals(this.FromLocationField, value) != true)) {
                    this.FromLocationField = value;
                    this.RaisePropertyChanged("FromLocation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ToLocation {
            get {
                return this.ToLocationField;
            }
            set {
                if ((object.ReferenceEquals(this.ToLocationField, value) != true)) {
                    this.ToLocationField = value;
                    this.RaisePropertyChanged("ToLocation");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        TestClient.ServiceReference1.Flight[] GetData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<TestClient.ServiceReference1.Flight[]> GetDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindFlightByID", ReplyAction="http://tempuri.org/IService1/FindFlightByIDResponse")]
        TestClient.ServiceReference1.Flight FindFlightByID(int flightNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindFlightByID", ReplyAction="http://tempuri.org/IService1/FindFlightByIDResponse")]
        System.Threading.Tasks.Task<TestClient.ServiceReference1.Flight> FindFlightByIDAsync(int flightNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ChangeFlight", ReplyAction="http://tempuri.org/IService1/ChangeFlightResponse")]
        string ChangeFlight(int flightNumber, string locationFrom, string locationTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ChangeFlight", ReplyAction="http://tempuri.org/IService1/ChangeFlightResponse")]
        System.Threading.Tasks.Task<string> ChangeFlightAsync(int flightNumber, string locationFrom, string locationTo);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : TestClient.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<TestClient.ServiceReference1.IService1>, TestClient.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public TestClient.ServiceReference1.Flight[] GetData() {
            return base.Channel.GetData();
        }
        
        public System.Threading.Tasks.Task<TestClient.ServiceReference1.Flight[]> GetDataAsync() {
            return base.Channel.GetDataAsync();
        }
        
        public TestClient.ServiceReference1.Flight FindFlightByID(int flightNumber) {
            return base.Channel.FindFlightByID(flightNumber);
        }
        
        public System.Threading.Tasks.Task<TestClient.ServiceReference1.Flight> FindFlightByIDAsync(int flightNumber) {
            return base.Channel.FindFlightByIDAsync(flightNumber);
        }
        
        public string ChangeFlight(int flightNumber, string locationFrom, string locationTo) {
            return base.Channel.ChangeFlight(flightNumber, locationFrom, locationTo);
        }
        
        public System.Threading.Tasks.Task<string> ChangeFlightAsync(int flightNumber, string locationFrom, string locationTo) {
            return base.Channel.ChangeFlightAsync(flightNumber, locationFrom, locationTo);
        }
    }
}
